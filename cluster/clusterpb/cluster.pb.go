// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

/*
Package clusterpb is a generated protocol buffer package.

It is generated from these files:
	cluster.proto

It has these top-level messages:
	RegisterNodeRequest
	NodeService
	RegisterNodeResponse
	RequestMessage
	NotifyMessage
	ResponseMessage
	OnMessage
	NodeHandleResponse
*/
package clusterpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterNodeRequest struct {
	NodeType       string `protobuf:"bytes,1,opt,name=nodeType" json:"nodeType"`
	ServiceAddress string `protobuf:"bytes,2,opt,name=serviceAddress" json:"serviceAddress"`
}

func (m *RegisterNodeRequest) Reset()                    { *m = RegisterNodeRequest{} }
func (m *RegisterNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterNodeRequest) ProtoMessage()               {}
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterNodeRequest) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *RegisterNodeRequest) GetServiceAddress() string {
	if m != nil {
		return m.ServiceAddress
	}
	return ""
}

type NodeService struct {
	NodeType string   `protobuf:"bytes,1,opt,name=nodeType" json:"nodeType"`
	Services []string `protobuf:"bytes,2,rep,name=services" json:"services"`
}

func (m *NodeService) Reset()                    { *m = NodeService{} }
func (m *NodeService) String() string            { return proto.CompactTextString(m) }
func (*NodeService) ProtoMessage()               {}
func (*NodeService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeService) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *NodeService) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

type RegisterNodeResponse struct {
	NodeServices []*NodeService `protobuf:"bytes,1,rep,name=nodeServices" json:"nodeServices"`
}

func (m *RegisterNodeResponse) Reset()                    { *m = RegisterNodeResponse{} }
func (m *RegisterNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterNodeResponse) ProtoMessage()               {}
func (*RegisterNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterNodeResponse) GetNodeServices() []*NodeService {
	if m != nil {
		return m.NodeServices
	}
	return nil
}

type RequestMessage struct {
}

func (m *RequestMessage) Reset()                    { *m = RequestMessage{} }
func (m *RequestMessage) String() string            { return proto.CompactTextString(m) }
func (*RequestMessage) ProtoMessage()               {}
func (*RequestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type NotifyMessage struct {
}

func (m *NotifyMessage) Reset()                    { *m = NotifyMessage{} }
func (m *NotifyMessage) String() string            { return proto.CompactTextString(m) }
func (*NotifyMessage) ProtoMessage()               {}
func (*NotifyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ResponseMessage struct {
}

func (m *ResponseMessage) Reset()                    { *m = ResponseMessage{} }
func (m *ResponseMessage) String() string            { return proto.CompactTextString(m) }
func (*ResponseMessage) ProtoMessage()               {}
func (*ResponseMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type OnMessage struct {
}

func (m *OnMessage) Reset()                    { *m = OnMessage{} }
func (m *OnMessage) String() string            { return proto.CompactTextString(m) }
func (*OnMessage) ProtoMessage()               {}
func (*OnMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type NodeHandleResponse struct {
}

func (m *NodeHandleResponse) Reset()                    { *m = NodeHandleResponse{} }
func (m *NodeHandleResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeHandleResponse) ProtoMessage()               {}
func (*NodeHandleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*RegisterNodeRequest)(nil), "clusterpb.RegisterNodeRequest")
	proto.RegisterType((*NodeService)(nil), "clusterpb.NodeService")
	proto.RegisterType((*RegisterNodeResponse)(nil), "clusterpb.RegisterNodeResponse")
	proto.RegisterType((*RequestMessage)(nil), "clusterpb.RequestMessage")
	proto.RegisterType((*NotifyMessage)(nil), "clusterpb.NotifyMessage")
	proto.RegisterType((*ResponseMessage)(nil), "clusterpb.ResponseMessage")
	proto.RegisterType((*OnMessage)(nil), "clusterpb.OnMessage")
	proto.RegisterType((*NodeHandleResponse)(nil), "clusterpb.NodeHandleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Cluster/RegisterNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Cluster/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterpb.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _Cluster_RegisterNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

// Client API for Node service

type NodeClient interface {
	HandleRequest(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*NodeHandleResponse, error)
	HandleNotify(ctx context.Context, in *NotifyMessage, opts ...grpc.CallOption) (*NodeHandleResponse, error)
	HandleOn(ctx context.Context, in *OnMessage, opts ...grpc.CallOption) (*NodeHandleResponse, error)
	HandleResponse(ctx context.Context, in *ResponseMessage, opts ...grpc.CallOption) (*NodeHandleResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) HandleRequest(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*NodeHandleResponse, error) {
	out := new(NodeHandleResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Node/HandleRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) HandleNotify(ctx context.Context, in *NotifyMessage, opts ...grpc.CallOption) (*NodeHandleResponse, error) {
	out := new(NodeHandleResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Node/HandleNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) HandleOn(ctx context.Context, in *OnMessage, opts ...grpc.CallOption) (*NodeHandleResponse, error) {
	out := new(NodeHandleResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Node/HandleOn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) HandleResponse(ctx context.Context, in *ResponseMessage, opts ...grpc.CallOption) (*NodeHandleResponse, error) {
	out := new(NodeHandleResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Node/HandleResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	HandleRequest(context.Context, *RequestMessage) (*NodeHandleResponse, error)
	HandleNotify(context.Context, *NotifyMessage) (*NodeHandleResponse, error)
	HandleOn(context.Context, *OnMessage) (*NodeHandleResponse, error)
	HandleResponse(context.Context, *ResponseMessage) (*NodeHandleResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_HandleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).HandleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Node/HandleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).HandleRequest(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_HandleNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).HandleNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Node/HandleNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).HandleNotify(ctx, req.(*NotifyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_HandleOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).HandleOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Node/HandleOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).HandleOn(ctx, req.(*OnMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_HandleResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).HandleResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Node/HandleResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).HandleResponse(ctx, req.(*ResponseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterpb.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleRequest",
			Handler:    _Node_HandleRequest_Handler,
		},
		{
			MethodName: "HandleNotify",
			Handler:    _Node_HandleNotify_Handler,
		},
		{
			MethodName: "HandleOn",
			Handler:    _Node_HandleOn_Handler,
		},
		{
			MethodName: "HandleResponse",
			Handler:    _Node_HandleResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xfb, 0xe7, 0xe5, 0xb5, 0x9d, 0x26, 0xa9, 0xae, 0x41, 0x62, 0x40, 0x2d, 0x7b, 0x90,
	0x9e, 0x72, 0x88, 0x37, 0x6f, 0x45, 0x04, 0x45, 0xda, 0x62, 0xf4, 0x22, 0x78, 0x69, 0x9b, 0xb1,
	0x04, 0xca, 0x6e, 0xcc, 0xa6, 0x42, 0xbf, 0x95, 0x1f, 0x51, 0x92, 0xcd, 0xc6, 0xdd, 0xa2, 0xe6,
	0x38, 0x4f, 0x66, 0x7e, 0xf3, 0xcc, 0xb3, 0x01, 0x7b, 0xb5, 0xd9, 0x8a, 0x1c, 0xb3, 0x20, 0xcd,
	0x78, 0xce, 0x49, 0xbf, 0x2a, 0xd3, 0x25, 0x7d, 0x81, 0xe3, 0x08, 0xd7, 0x49, 0x51, 0xcd, 0x78,
	0x8c, 0x11, 0xbe, 0x6f, 0x51, 0xe4, 0xc4, 0x87, 0x1e, 0xe3, 0x31, 0x3e, 0xef, 0x52, 0xf4, 0xda,
	0xa3, 0xf6, 0xb8, 0x1f, 0xd5, 0x35, 0xb9, 0x04, 0x47, 0x60, 0xf6, 0x91, 0xac, 0x70, 0x12, 0xc7,
	0x19, 0x0a, 0xe1, 0x75, 0xca, 0x8e, 0x3d, 0x95, 0xde, 0xc2, 0xa0, 0x40, 0x3e, 0x49, 0xf5, 0x4f,
	0xa4, 0x0f, 0xbd, 0x6a, 0xb8, 0x80, 0x75, 0x8b, 0x6f, 0xaa, 0xa6, 0x11, 0xb8, 0xa6, 0x43, 0x91,
	0x72, 0x26, 0x90, 0x5c, 0x83, 0xc5, 0xbe, 0xf1, 0xc2, 0x6b, 0x8f, 0xba, 0xe3, 0x41, 0x78, 0x12,
	0xd4, 0xb7, 0x05, 0xda, 0xf6, 0xc8, 0xe8, 0xa5, 0x87, 0xe0, 0x54, 0x97, 0x4e, 0x51, 0x88, 0xc5,
	0x1a, 0xe9, 0x10, 0xec, 0x19, 0xcf, 0x93, 0xb7, 0x9d, 0x12, 0x8e, 0x60, 0xa8, 0x56, 0x29, 0x69,
	0x00, 0xfd, 0x39, 0x53, 0x85, 0x0b, 0xa4, 0xe0, 0xdf, 0x2d, 0x58, 0xbc, 0xa9, 0x4d, 0x85, 0xaf,
	0x70, 0x70, 0x23, 0xf7, 0x93, 0x47, 0xb0, 0x74, 0xdf, 0xe4, 0x5c, 0x73, 0xf6, 0x43, 0xe4, 0xfe,
	0xc5, 0xaf, 0xdf, 0x25, 0x9b, 0xb6, 0xc2, 0xcf, 0x0e, 0xfc, 0x2b, 0x59, 0x0f, 0x60, 0xab, 0xc5,
	0xf2, 0xbd, 0x4e, 0x8d, 0x61, 0xfd, 0x32, 0xff, 0x6c, 0x2f, 0x11, 0xd3, 0x31, 0x6d, 0x91, 0x7b,
	0xb0, 0xa4, 0x26, 0x03, 0x20, 0x9e, 0x31, 0xa0, 0x65, 0xd2, 0x8c, 0x9a, 0x40, 0x4f, 0x6a, 0x73,
	0x46, 0x5c, 0xad, 0xb9, 0x8e, 0xad, 0x19, 0x31, 0x05, 0xc7, 0xd4, 0x88, 0x6f, 0xdc, 0x66, 0x3c,
	0x49, 0x23, 0x6e, 0xf9, 0xbf, 0xfc, 0xe3, 0xaf, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x3c,
	0x5c, 0x49, 0x02, 0x03, 0x00, 0x00,
}
