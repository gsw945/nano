// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

/*
Package clusterpb is a generated protocol buffer package.

It is generated from these files:
	cluster.proto

It has these top-level messages:
	MemberInfo
	RegisterRequest
	RegisterResponse
	RequestMessage
	NotifyMessage
	ResponseMessage
	PushMessage
	MemberHandleResponse
	NewMemberRequest
	NewMemberResponse
*/
package clusterpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MemberInfo struct {
	MemberType string   `protobuf:"bytes,1,opt,name=memberType" json:"memberType"`
	MemberAddr string   `protobuf:"bytes,2,opt,name=memberAddr" json:"memberAddr"`
	Services   []string `protobuf:"bytes,3,rep,name=services" json:"services"`
}

func (m *MemberInfo) Reset()                    { *m = MemberInfo{} }
func (m *MemberInfo) String() string            { return proto.CompactTextString(m) }
func (*MemberInfo) ProtoMessage()               {}
func (*MemberInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MemberInfo) GetMemberType() string {
	if m != nil {
		return m.MemberType
	}
	return ""
}

func (m *MemberInfo) GetMemberAddr() string {
	if m != nil {
		return m.MemberAddr
	}
	return ""
}

func (m *MemberInfo) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

type RegisterRequest struct {
	MemberInfo *MemberInfo `protobuf:"bytes,1,opt,name=memberInfo" json:"memberInfo"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterRequest) GetMemberInfo() *MemberInfo {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

type RegisterResponse struct {
	Members []*MemberInfo `protobuf:"bytes,1,rep,name=members" json:"members"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterResponse) GetMembers() []*MemberInfo {
	if m != nil {
		return m.Members
	}
	return nil
}

type RequestMessage struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	Route string `protobuf:"bytes,2,opt,name=route" json:"route"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
}

func (m *RequestMessage) Reset()                    { *m = RequestMessage{} }
func (m *RequestMessage) String() string            { return proto.CompactTextString(m) }
func (*RequestMessage) ProtoMessage()               {}
func (*RequestMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RequestMessage) GetRoute() string {
	if m != nil {
		return m.Route
	}
	return ""
}

func (m *RequestMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type NotifyMessage struct {
	Route string `protobuf:"bytes,1,opt,name=route" json:"route"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (m *NotifyMessage) Reset()                    { *m = NotifyMessage{} }
func (m *NotifyMessage) String() string            { return proto.CompactTextString(m) }
func (*NotifyMessage) ProtoMessage()               {}
func (*NotifyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NotifyMessage) GetRoute() string {
	if m != nil {
		return m.Route
	}
	return ""
}

func (m *NotifyMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ResponseMessage struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (m *ResponseMessage) Reset()                    { *m = ResponseMessage{} }
func (m *ResponseMessage) String() string            { return proto.CompactTextString(m) }
func (*ResponseMessage) ProtoMessage()               {}
func (*ResponseMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ResponseMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResponseMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PushMessage struct {
	Route string `protobuf:"bytes,1,opt,name=route" json:"route"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (m *PushMessage) Reset()                    { *m = PushMessage{} }
func (m *PushMessage) String() string            { return proto.CompactTextString(m) }
func (*PushMessage) ProtoMessage()               {}
func (*PushMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PushMessage) GetRoute() string {
	if m != nil {
		return m.Route
	}
	return ""
}

func (m *PushMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type MemberHandleResponse struct {
}

func (m *MemberHandleResponse) Reset()                    { *m = MemberHandleResponse{} }
func (m *MemberHandleResponse) String() string            { return proto.CompactTextString(m) }
func (*MemberHandleResponse) ProtoMessage()               {}
func (*MemberHandleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type NewMemberRequest struct {
	MemberInfo *MemberInfo `protobuf:"bytes,1,opt,name=memberInfo" json:"memberInfo"`
}

func (m *NewMemberRequest) Reset()                    { *m = NewMemberRequest{} }
func (m *NewMemberRequest) String() string            { return proto.CompactTextString(m) }
func (*NewMemberRequest) ProtoMessage()               {}
func (*NewMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NewMemberRequest) GetMemberInfo() *MemberInfo {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

type NewMemberResponse struct {
}

func (m *NewMemberResponse) Reset()                    { *m = NewMemberResponse{} }
func (m *NewMemberResponse) String() string            { return proto.CompactTextString(m) }
func (*NewMemberResponse) ProtoMessage()               {}
func (*NewMemberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*MemberInfo)(nil), "clusterpb.MemberInfo")
	proto.RegisterType((*RegisterRequest)(nil), "clusterpb.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "clusterpb.RegisterResponse")
	proto.RegisterType((*RequestMessage)(nil), "clusterpb.RequestMessage")
	proto.RegisterType((*NotifyMessage)(nil), "clusterpb.NotifyMessage")
	proto.RegisterType((*ResponseMessage)(nil), "clusterpb.ResponseMessage")
	proto.RegisterType((*PushMessage)(nil), "clusterpb.PushMessage")
	proto.RegisterType((*MemberHandleResponse)(nil), "clusterpb.MemberHandleResponse")
	proto.RegisterType((*NewMemberRequest)(nil), "clusterpb.NewMemberRequest")
	proto.RegisterType((*NewMemberResponse)(nil), "clusterpb.NewMemberResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Master service

type MasterClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type masterClient struct {
	cc *grpc.ClientConn
}

func NewMasterClient(cc *grpc.ClientConn) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Master/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Master service

type MasterServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

func RegisterMasterServer(s *grpc.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Master/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterpb.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Master_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

// Client API for Member service

type MemberClient interface {
	HandleRequest(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*MemberHandleResponse, error)
	HandleNotify(ctx context.Context, in *NotifyMessage, opts ...grpc.CallOption) (*MemberHandleResponse, error)
	HandlePush(ctx context.Context, in *PushMessage, opts ...grpc.CallOption) (*MemberHandleResponse, error)
	HandleResponse(ctx context.Context, in *ResponseMessage, opts ...grpc.CallOption) (*MemberHandleResponse, error)
	NewMember(ctx context.Context, in *NewMemberRequest, opts ...grpc.CallOption) (*NewMemberResponse, error)
}

type memberClient struct {
	cc *grpc.ClientConn
}

func NewMemberClient(cc *grpc.ClientConn) MemberClient {
	return &memberClient{cc}
}

func (c *memberClient) HandleRequest(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*MemberHandleResponse, error) {
	out := new(MemberHandleResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Member/HandleRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) HandleNotify(ctx context.Context, in *NotifyMessage, opts ...grpc.CallOption) (*MemberHandleResponse, error) {
	out := new(MemberHandleResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Member/HandleNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) HandlePush(ctx context.Context, in *PushMessage, opts ...grpc.CallOption) (*MemberHandleResponse, error) {
	out := new(MemberHandleResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Member/HandlePush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) HandleResponse(ctx context.Context, in *ResponseMessage, opts ...grpc.CallOption) (*MemberHandleResponse, error) {
	out := new(MemberHandleResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Member/HandleResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberClient) NewMember(ctx context.Context, in *NewMemberRequest, opts ...grpc.CallOption) (*NewMemberResponse, error) {
	out := new(NewMemberResponse)
	err := grpc.Invoke(ctx, "/clusterpb.Member/NewMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Member service

type MemberServer interface {
	HandleRequest(context.Context, *RequestMessage) (*MemberHandleResponse, error)
	HandleNotify(context.Context, *NotifyMessage) (*MemberHandleResponse, error)
	HandlePush(context.Context, *PushMessage) (*MemberHandleResponse, error)
	HandleResponse(context.Context, *ResponseMessage) (*MemberHandleResponse, error)
	NewMember(context.Context, *NewMemberRequest) (*NewMemberResponse, error)
}

func RegisterMemberServer(s *grpc.Server, srv MemberServer) {
	s.RegisterService(&_Member_serviceDesc, srv)
}

func _Member_HandleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).HandleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Member/HandleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).HandleRequest(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_HandleNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).HandleNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Member/HandleNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).HandleNotify(ctx, req.(*NotifyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_HandlePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).HandlePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Member/HandlePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).HandlePush(ctx, req.(*PushMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_HandleResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).HandleResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Member/HandleResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).HandleResponse(ctx, req.(*ResponseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Member_NewMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServer).NewMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterpb.Member/NewMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServer).NewMember(ctx, req.(*NewMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Member_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterpb.Member",
	HandlerType: (*MemberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleRequest",
			Handler:    _Member_HandleRequest_Handler,
		},
		{
			MethodName: "HandleNotify",
			Handler:    _Member_HandleNotify_Handler,
		},
		{
			MethodName: "HandlePush",
			Handler:    _Member_HandlePush_Handler,
		},
		{
			MethodName: "HandleResponse",
			Handler:    _Member_HandleResponse_Handler,
		},
		{
			MethodName: "NewMember",
			Handler:    _Member_NewMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x6e, 0xa2, 0x40,
	0x14, 0x16, 0x70, 0x5d, 0x39, 0xfe, 0xac, 0x7b, 0xd6, 0x35, 0x2c, 0xbb, 0xd9, 0x12, 0xae, 0xbc,
	0xb2, 0x89, 0x8d, 0x69, 0x7a, 0xd9, 0x34, 0x4d, 0xb5, 0x0d, 0xda, 0x90, 0xbe, 0x00, 0xca, 0xa8,
	0x24, 0x2a, 0x94, 0x81, 0x36, 0xbe, 0x41, 0x1f, 0xbb, 0x81, 0x01, 0x1c, 0x28, 0x26, 0x36, 0xbd,
	0xe3, 0x9c, 0x33, 0xdf, 0xcf, 0x9c, 0x6f, 0x02, 0xb4, 0x16, 0x9b, 0x90, 0x06, 0xc4, 0x1f, 0x78,
	0xbe, 0x1b, 0xb8, 0x28, 0x27, 0xa5, 0x37, 0xd7, 0xd7, 0x00, 0x06, 0xd9, 0xce, 0x89, 0x3f, 0xd9,
	0x2d, 0x5d, 0xfc, 0x0f, 0xb0, 0x8d, 0xab, 0xa7, 0xbd, 0x47, 0x14, 0x41, 0x13, 0xfa, 0xb2, 0xc9,
	0x75, 0x0e, 0xf3, 0x6b, 0xdb, 0xf6, 0x15, 0x91, 0x9f, 0x47, 0x1d, 0x54, 0xa1, 0x4e, 0x89, 0xff,
	0xe2, 0x2c, 0x08, 0x55, 0x24, 0x4d, 0xea, 0xcb, 0x66, 0x56, 0xeb, 0x63, 0xf8, 0x61, 0x92, 0x95,
	0x13, 0xe9, 0x9a, 0xe4, 0x39, 0x24, 0x34, 0xc0, 0x51, 0x4a, 0x17, 0x89, 0xc7, 0x72, 0x8d, 0xe1,
	0xef, 0x41, 0x66, 0x6e, 0x70, 0x70, 0x66, 0x72, 0x07, 0xf5, 0x1b, 0xe8, 0x1c, 0x98, 0xa8, 0xe7,
	0xee, 0x28, 0xc1, 0x73, 0xf8, 0xce, 0x4e, 0x50, 0x45, 0xd0, 0xa4, 0xe3, 0x3c, 0xe9, 0x29, 0xfd,
	0x1e, 0xda, 0x89, 0x0d, 0x83, 0x50, 0x6a, 0xad, 0x08, 0xb6, 0x41, 0x74, 0xec, 0xd8, 0x45, 0xd5,
	0x14, 0x1d, 0x1b, 0xbb, 0xf0, 0xcd, 0x77, 0xc3, 0x80, 0x24, 0xf7, 0x64, 0x05, 0x22, 0x54, 0x6d,
	0x2b, 0xb0, 0x14, 0x49, 0x13, 0xfa, 0x4d, 0x33, 0xfe, 0xd6, 0xaf, 0xa0, 0x35, 0x75, 0x03, 0x67,
	0xb9, 0x4f, 0xa9, 0x32, 0xa8, 0x50, 0x06, 0x15, 0x39, 0xe8, 0x28, 0xda, 0x0a, 0xbb, 0xc3, 0x31,
	0x1f, 0x65, 0xb0, 0x4b, 0x68, 0x3c, 0x86, 0x74, 0xfd, 0x79, 0xbd, 0x1e, 0x74, 0xd9, 0x36, 0xc6,
	0xd6, 0xce, 0xde, 0x90, 0x54, 0x5b, 0x9f, 0x40, 0x67, 0x4a, 0x5e, 0xd9, 0xe8, 0x8b, 0xf1, 0xfc,
	0x82, 0x9f, 0x1c, 0x15, 0xe3, 0x1f, 0xce, 0xa0, 0x66, 0x58, 0x11, 0x0e, 0x6f, 0xa1, 0x9e, 0xa6,
	0x87, 0x2a, 0xc7, 0x56, 0x78, 0x1c, 0xea, 0xdf, 0xd2, 0x59, 0x62, 0xb7, 0x32, 0x7c, 0x93, 0xa0,
	0xc6, 0x34, 0xd0, 0x80, 0x56, 0x7a, 0x1b, 0x66, 0xfc, 0x4f, 0x0e, 0xca, 0x87, 0xac, 0x9e, 0x7d,
	0xf0, 0x5f, 0x58, 0x44, 0x05, 0x1f, 0xa0, 0xc9, 0x7a, 0x2c, 0x53, 0x54, 0x38, 0x48, 0x2e, 0xe6,
	0x53, 0xc8, 0xee, 0x00, 0x58, 0x2f, 0x8a, 0x0b, 0x7b, 0x1c, 0x80, 0xcb, 0xef, 0x14, 0xa2, 0x19,
	0xb4, 0xf3, 0xbd, 0xc2, 0xf2, 0x72, 0x6f, 0xe8, 0x14, 0xc2, 0x31, 0xc8, 0x59, 0x4c, 0xc8, 0x2f,
	0xbb, 0xf8, 0x0e, 0xd4, 0x7f, 0xe5, 0xc3, 0x94, 0x69, 0x5e, 0x8b, 0xff, 0x2a, 0x17, 0xef, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x53, 0x62, 0xa0, 0xe1, 0x66, 0x04, 0x00, 0x00,
}
